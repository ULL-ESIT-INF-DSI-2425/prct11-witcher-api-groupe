import express from 'express';
import './db/mongoose.js';
import { HunterModel } from './models/hunter.js';

const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());

// Hunter routes 
// Basic petition to post a hunter
app.post('/hunter', async (req, res) => {
  const hunter = new HunterModel(req.body);

  try {
    await hunter.save();
    res.status(201).send(hunter);
  } catch (error) {
    res.status(400).send(error);
  }
  // hunter.save().then(() => {
  //   res.status(201).send(hunter)
  // }).catch((error) => {
  //   res.status(400).send(error)
  // });
}); 

// Basic petition to get a hunter with his name 
app.get('/hunter', (req, res) => {
  const filter = req.query.name?{name: req.query.name}:{}; ;

  HunterModel.find(filter).then((hunters) => {
    if (hunters.length !== 0) {
      res.status(200).send(hunters);
    } else {
      return res.status(404).send('No hunters found');
    }
  }).catch((error) => {
    res.status(500).send(error)
  });
}); 

// Basic petition to get a hunter with his id generated by mongoose
app.get('/hunter/:id', (req, res) => {
  HunterModel.findById(req.params.id).then((hunter) => {
    if (!hunter) {
      res.status(404).send('Hunter not found');
    } else {
      res.status(200).send(hunter);
    }
  }).catch((error) => {
    res.status(500).send(error)
  });
});

// Basic delete petition to delete a hunter with his name
app.delete('/hunter', (req, res) => {
  if (!req.query.title) {
    res.status(400).send({
      error: 'A title must be provided',
    });
  } else {
    HunterModel.findOneAndDelete({title: req.query.title.toString()}).then((hunter) => {
      if (!hunter) {
        res.status(404).send('Hunter not found');
      } else {
        res.status(200).send(hunter);
      }
    }).catch(() => {
      res.status(400).send();
    });
  }
});

// Basic deletion petition to delete a hunter with his id generated by mongoose
app.delete('/hunter/:id', async (req, res) => {
  try {
    const hunter = await HunterModel.findByIdAndDelete(req.params.id);
    if (!hunter) {
      res.status(404).send('Hunter not found');
    }
  } catch(error) {
    res.status(500).send(error);
  }
  // HunterModel.findByIdAndDelete(req.params.id).then((hunter) => {
  //   if (!hunter) {
  //     res.status(404).send('Hunter not found');
  //   } else {
  //     res.status(200).send(hunter);
  //   }
  // }).catch(() => {
  //   res.status(400).send();
  // });
});

// Merchant routes
// Basic petition to post a merchant
app.post('/merchant', (req, res) => {
  const merchant = new HunterModel(req.body);

  merchant.save().then(() => {
    res.status(201).send(merchant)
  }).catch((error) => {
    res.status(400).send(error)
  });
});

// Good routes
// Basic petition to post a good
app.post('/good', (req, res) => {
  const goods = new HunterModel(req.body);

  goods.save().then(() => {
    res.status(201).send(goods)
  }).catch((error) => {
    res.status(400).send(error)
  });
}); 

// Default route
app.all('/{*splat}', (_, res) => {
  res.status(501).send(); 
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
}); 
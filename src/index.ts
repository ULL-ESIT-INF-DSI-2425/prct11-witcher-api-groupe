import express from 'express';
import './db/mongoose.js';
import { HunterModel } from './models/hunter.js';
import { MerchantModel } from './models/merchant.js'

const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());

// Hunter routes 

// Basic petition to post a hunter
app.post('/hunter', async (req, res) => {
  const hunter = new HunterModel(req.body);

  try {
    await hunter.save();
    res.status(201).send(hunter);
  } catch (error) {
    res.status(400).send(error);
  }
}); 

// Basic petition to get a hunter with his name 
app.get('/hunter', async (req, res) => {
  const filter = req.query.name?{name: req.query.name.toString()}:{}; ;

  try {
    const hunter = await HunterModel.find(filter);
    if (hunter.length !== 0) {
      res.status(200).send(hunter);
    } else {
      res.status(404).send('No hunters found');
    }
  } catch (error) { 
    res.status(400).send(error);
  }
}); 

// Basic petition to get a hunter with his id generated by mongoose
app.get('/hunter/:id', async (req, res) => {
  try {
    const hunter = HunterModel.findById(req.params.id)
    if (!hunter) {
      res.status(404).send('Hunter not found');
    } else {
      res.status(200).send(hunter);
    }
  } catch(error) {
    res.status(400).send(error)
  }
});

// Basic petition to modify hunter
app.patch('/hunter', (req, res) => {
  if (!req.query.title) {
    res.status(400).send({
      error: 'A title must be provided in the query string',
    });
  } else if (!req.body) {
    res.status(400).send({
      error: 'Fields to be modified have to be provided in the request body',
    });
  } else {
    const allowedUpdates = ['name', 'race', 'location'];
    const actualUpdates = Object.keys(req.body);
    const isValidUpdate =
      actualUpdates.every((update) => allowedUpdates.includes(update));

    if (!isValidUpdate) {
      res.status(400).send({
        error: 'Update is not permitted',
      });
    } else {
      try {
        const hunter = HunterModel.findOneAndUpdate({title: req.query.title.toString()}, req.body, {
            new: true,
            runValidators: true,
          })
        
        if (!hunter) {
          res.status(404).send('Hunter not found');
        } else {
          res.status(200).send(hunter)
        }
      } catch(error) {
        res.status(400).send(error);
      }
    }
  }
});

// Basic delete petition to delete a hunter with his name
app.delete('/hunter', (req, res) => {
  if (!req.query.title) {
    res.status(400).send({
      error: 'A title must be provided',
    });
  } else {
    try {
      const hunter = HunterModel.findOneAndDelete({title: req.query.title.toString()})
      if (!hunter) {
        res.status(404).send('Hunter not found');
      } else {
        res.status(200).send(hunter);
      }
    } catch(error) {
      res.status(400).send(error);
    }
  }
});

// Basic deletion petition to delete a hunter with his id generated by mongoose
app.delete('/hunter/:id', async (req, res) => {
  try {
    const hunter = await HunterModel.findByIdAndDelete(req.params.id);
    if (!hunter) {
      res.status(404).send('Hunter not found');
    }
  } catch(error) {
    res.status(500).send(error);
  }
});

// Merchant routes

// Basic petition to post a merchant
app.post('/merchant', async (req, res) => {
  const merchant = new MerchantModel(req.body);

  try {
    await merchant.save();
    res.status(201).send(merchant);
  } catch (error) {
    res.status(400).send(error)
  }
});

// Basic petition to get a hunter with his name 
app.get('/merchant', async (req, res) => {
  const filter = req.query.name?{name: req.query.name.toString()}:{}; ;

  try {
    const merchant = await MerchantModel.find(filter);
    if (merchant.length !== 0) {
      res.status(200).send(merchant);
    } else {
      res.status(404).send('No Merchants found');
    }
  } catch (error) { 
    res.status(400).send(error);
  }
}); 

// Basic petition to get a hunter with his id generated by mongoose
app.get('/merchant/:id', async (req, res) => {
  try {
    const merchant = MerchantModel.findById(req.params.id)
    if (!merchant) {
      res.status(404).send('Merchant not found');
    } else {
      res.status(200).send(merchant);
    }
  } catch(error) {
    res.status(400).send(error)
  }
});

// Basic petition to modify hunter
app.patch('/merchant', (req, res) => {
  if (!req.query.title) {
    res.status(400).send({
      error: 'A title must be provided in the query string',
    });
  } else if (!req.body) {
    res.status(400).send({
      error: 'Fields to be modified have to be provided in the request body',
    });
  } else {
    const allowedUpdates = ['name', 'race', 'location'];
    const actualUpdates = Object.keys(req.body);
    const isValidUpdate =
      actualUpdates.every((update) => allowedUpdates.includes(update));

    if (!isValidUpdate) {
      res.status(400).send({
        error: 'Update is not permitted',
      });
    } else {
      try {
        const merchant = MerchantModel.findOneAndUpdate({title: req.query.title.toString()}, req.body, {
            new: true,
            runValidators: true,
          })
        
        if (!merchant) {
          res.status(404).send('Merchant not found');
        } else {
          res.status(200).send(merchant)
        }
      } catch(error) {
        res.status(400).send(error);
      }
    }
  }
});

// Basic delete petition to delete a hunter with his name
app.delete('/merchant', (req, res) => {
  if (!req.query.title) {
    res.status(400).send({
      error: 'A title must be provided',
    });
  } else {
    try {
      const merchant = MerchantModel.findOneAndDelete({title: req.query.title.toString()})
      if (!merchant) {
        res.status(404).send('Merchant not found');
      } else {
        res.status(200).send(merchant);
      }
    } catch(error) {
      res.status(400).send(error);
    }
  }
});

// Basic deletion petition to delete a hunter with his id generated by mongoose
app.delete('/merchant/:id', async (req, res) => {
  try {
    const merchant = await MerchantModel.findByIdAndDelete(req.params.id);
    if (!merchant) {
      res.status(404).send('Merchant not found');
    }
  } catch(error) {
    res.status(500).send(error);
  }
});

// Good routes

// Basic petition to post a good
// app.post('/good', (req, res) => {
//   const goods = new GoodModel(req.body);

//   try {
//     goods.save()
//     res.status(201).send(goods)
//   } catch(error) {
//     res.status(400).send(error)
//   }
// }); 

// Default route
app.all('/{*splat}', (_, res) => {
  res.status(501).send(); 
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
}); 